name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete old ECR images
        run: |
          echo "üßπ Iniciando limpeza de imagens antigas..."

          # Listar todas as imagens exceto 'latest'
          IMAGES=$(aws ecr list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json)

          echo "üìã Imagens encontradas (exceto latest):"
          echo "$IMAGES" | jq -r '.[] | select(.imageTag != null) | .imageTag'

          # Contar total de imagens (exceto latest)
          TOTAL_IMAGES=$(echo "$IMAGES" | jq 'length')
          echo "üìä Total de imagens (exceto latest): $TOTAL_IMAGES"

          # Manter apenas as 5 mais recentes (exceto latest)
          if [ "$TOTAL_IMAGES" -gt 5 ]; then
            echo "üóëÔ∏è  Deletando imagens antigas (mantendo 5 mais recentes + latest)..."

            # Obter imagens para deletar (ordenar por data e manter apenas as 5 mais recentes)
            IMAGES_TO_DELETE=$(aws ecr describe-images \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --query 'sort_by(imageDetails, &imagePushedAt)[:-5]' \
              --output json | \
              jq -r '.[] | select(.imageTags != null and (.imageTags | map(. == "latest") | any | not)) | .imageDigest')

            # Deletar imagens antigas
            for digest in $IMAGES_TO_DELETE; do
              if [ ! -z "$digest" ]; then
                echo "üóëÔ∏è  Deletando imagem: $digest"
                aws ecr batch-delete-image \
                  --repository-name ${{ env.ECR_REPOSITORY }} \
                  --image-ids imageDigest=$digest || echo "‚ö†Ô∏è  Falha ao deletar $digest"
              fi
            done
          else
            echo "‚úÖ N√∫mero de imagens dentro do limite (5). Nenhuma limpeza necess√°ria."
          fi

          # Deletar imagens sem tags (untagged)
          echo "üßπ Deletando imagens sem tags..."
          UNTAGGED_IMAGES=$(aws ecr list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds' \
            --output json)

          if [ "$(echo "$UNTAGGED_IMAGES" | jq 'length')" -gt 0 ]; then
            echo "$UNTAGGED_IMAGES" | jq -r '.[] | .imageDigest' | while read digest; do
              if [ ! -z "$digest" ]; then
                echo "üóëÔ∏è  Deletando imagem sem tag: $digest"
                aws ecr batch-delete-image \
                  --repository-name ${{ env.ECR_REPOSITORY }} \
                  --image-ids imageDigest=$digest || echo "‚ö†Ô∏è  Falha ao deletar $digest"
              fi
            done
          else
            echo "‚úÖ Nenhuma imagem sem tag encontrada."
          fi

          echo "‚ú® Limpeza conclu√≠da!"

      - name: Show remaining images
        run: |
          echo "üìã Imagens restantes no reposit√≥rio:"
          aws ecr list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'imageIds' \
            --output table